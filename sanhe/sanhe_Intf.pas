unit sanhe_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
//
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROEncoding,
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver,
  DataAbstract4_Intf;

const LibraryUID: String = '{CB5D2DC4-D58B-40D6-B396-F07630C3BE82}';
const DefaultNamespace: String = 'sanhe';
const TargetNamespace: String = 'sanhe';
const IAndroidService_IID: TGUID = '{DE7779BD-C150-4E47-8668-6824D3319FB7}';
const IDataService_IID: TGUID = '{51A7F1F9-2B17-402D-A877-C778E7E3A593}';
const ILoginService_IID: TGUID = '{7F0E0D54-EDE8-4EDA-BDC6-59F5915C300E}';
type
  { Forward declarations }
  IDataService = interface;
  IDataService_Async = interface;
  IDataService_AsyncEx = interface;
  ILoginService = interface;
  ILoginService_Async = interface;
  ILoginService_AsyncEx = interface;
  IAndroidService = interface;
  IAndroidService_Async = interface;
  IAndroidService_AsyncEx = interface;
  CoDataService = class;
  CoDataService_Async = class;
  CoDataService_AsyncEx = class;
  TDataService_Proxy = class;
  TDataService_AsyncProxy = class;
  TDataService_AsyncProxyEx = class;
  CoLoginService = class;
  CoLoginService_Async = class;
  CoLoginService_AsyncEx = class;
  TLoginService_Proxy = class;
  TLoginService_AsyncProxy = class;
  TLoginService_AsyncProxyEx = class;
  CoAndroidService = class;
  CoAndroidService_Async = class;
  CoAndroidService_AsyncEx = class;
  TAndroidService_Proxy = class;
  TAndroidService_AsyncProxy = class;
  TAndroidService_AsyncProxyEx = class;

  IDataService = interface(DataAbstract4_intf.IDataAbstractService)
  ['{51A7F1F9-2B17-402D-A877-C778E7E3A593}']
  end;

  IDataService_Async = interface(DataAbstract4_intf.IDataAbstractService_Async)
  ['{7ED110BA-B97C-4A74-9BFF-08FB4337015F}']
  end;

  IDataService_AsyncEx = interface(DataAbstract4_intf.IDataAbstractService_AsyncEx)
  ['{9A9E022A-A3A7-4C25-A31E-3CC6F9798EFE}']
  end;

  CoDataService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IDataService; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IDataService; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IDataService; overload;
  end;

  CoDataService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IDataService_Async; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IDataService_Async; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IDataService_Async; overload;
  end;

  CoDataService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IDataService_AsyncEx; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IDataService_AsyncEx; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IDataService_AsyncEx; overload;
  end;

  TDataService_Proxy = class(DataAbstract4_intf.TDataAbstractService_Proxy, IDataService)
  protected
    function __GetInterfaceName: String; override;
  end;

  TDataService_AsyncProxy = class(DataAbstract4_intf.TDataAbstractService_AsyncProxy, IDataService_Async)
  protected
    function __GetInterfaceName: String; override;
  end;

  TDataService_AsyncProxyEx = class(DataAbstract4_intf.TDataAbstractService_AsyncProxyEx, IDataService_AsyncEx)
  protected
    function __GetInterfaceName: String; override;
  end;

  ILoginService = interface(DataAbstract4_intf.ISimpleLoginService)
  ['{7F0E0D54-EDE8-4EDA-BDC6-59F5915C300E}']
  end;

  ILoginService_Async = interface(DataAbstract4_intf.ISimpleLoginService_Async)
  ['{8546AD8C-18FD-4106-8903-CF8F2CE3DAD9}']
  end;

  ILoginService_AsyncEx = interface(DataAbstract4_intf.ISimpleLoginService_AsyncEx)
  ['{35BB40DC-1022-47F1-B4E3-6A2784D54835}']
  end;

  CoLoginService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILoginService; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILoginService; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): ILoginService; overload;
  end;

  CoLoginService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILoginService_Async; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILoginService_Async; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): ILoginService_Async; overload;
  end;

  CoLoginService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILoginService_AsyncEx; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILoginService_AsyncEx; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): ILoginService_AsyncEx; overload;
  end;

  TLoginService_Proxy = class(DataAbstract4_intf.TSimpleLoginService_Proxy, ILoginService)
  protected
    function __GetInterfaceName: String; override;
  end;

  TLoginService_AsyncProxy = class(DataAbstract4_intf.TSimpleLoginService_AsyncProxy, ILoginService_Async)
  protected
    function __GetInterfaceName: String; override;
  end;

  TLoginService_AsyncProxyEx = class(DataAbstract4_intf.TSimpleLoginService_AsyncProxyEx, ILoginService_AsyncEx)
  protected
    function __GetInterfaceName: String; override;
  end;

  IAndroidService = interface(IROService)
  ['{DE7779BD-C150-4E47-8668-6824D3319FB7}']
    function sum(const a: Integer; const b: Integer): Integer;
    function getNum(const proNum: UnicodeString; const intoNum: UnicodeString): string;
    function getOrderData(const puStatus: UnicodeString): string;
    procedure delNum(const comNum: UnicodeString);
    function getOrderDtList(const puOrderNum: UnicodeString): string;
    function getLocation: string;
    function getCompany: string;
    function getUser: string;
    function addInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString; const userId: UnicodeString;
                          const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString; const memo: UnicodeString; const partnersId: UnicodeString;
                          const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString;
                          const idCardNumAllStr: UnicodeString): string;
    function addOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString; const outDate: UnicodeString; const operatorId: UnicodeString;
                          const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const qtyStr: UnicodeString;
                          const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString; const idCardNumStr: UnicodeString; const oddDtIdStr: UnicodeString): string;
    function getInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString): string;
    function getInstorageDt(const inCode: UnicodeString): string;
    function getInCode(const idCardNum: UnicodeString): string;
    function getProduct: string;
    function checkSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const repertoryIdStr: UnicodeString; const checkdtQtyStr: UnicodeString; const checkdtProfitStr: UnicodeString;
                     const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString; const detailQtyStr: UnicodeString): string;
  end;

  IAndroidService_Async = interface(IROAsyncInterface)
  ['{92EDBA4C-127A-4501-9EFB-5D79CB1E1920}']
    procedure Invoke_sum(const a: Integer; const b: Integer);
    procedure Invoke_getNum(const proNum: UnicodeString; const intoNum: UnicodeString);
    procedure Invoke_getOrderData(const puStatus: UnicodeString);
    procedure Invoke_delNum(const comNum: UnicodeString);
    procedure Invoke_getOrderDtList(const puOrderNum: UnicodeString);
    procedure Invoke_getLocation;
    procedure Invoke_getCompany;
    procedure Invoke_getUser;
    procedure Invoke_addInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString; const userId: UnicodeString;
                                  const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString; const memo: UnicodeString; const partnersId: UnicodeString;
                                  const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString;
                                  const idCardNumAllStr: UnicodeString);
    procedure Invoke_addOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString; const outDate: UnicodeString; const operatorId: UnicodeString;
                                  const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const qtyStr: UnicodeString;
                                  const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString; const idCardNumStr: UnicodeString; const oddDtIdStr: UnicodeString);
    procedure Invoke_getInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString);
    procedure Invoke_getInstorageDt(const inCode: UnicodeString);
    procedure Invoke_getInCode(const idCardNum: UnicodeString);
    procedure Invoke_getProduct;
    procedure Invoke_checkSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const repertoryIdStr: UnicodeString; const checkdtQtyStr: UnicodeString; const checkdtProfitStr: UnicodeString;
                             const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString; const detailQtyStr: UnicodeString);
    function Retrieve_sum: Integer;
    function Retrieve_getNum: string;
    function Retrieve_getOrderData: string;
    function Retrieve_getOrderDtList: string;
    function Retrieve_getLocation: string;
    function Retrieve_getCompany: string;
    function Retrieve_getUser: string;
    function Retrieve_addInstorage: string;
    function Retrieve_addOrderBack: string;
    function Retrieve_getInstorageData: string;
    function Retrieve_getInstorageDt: string;
    function Retrieve_getInCode: string;
    function Retrieve_getProduct: string;
    function Retrieve_checkSt: string;
  end;

  IAndroidService_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{A09875E1-3391-44BC-952A-58B0960F509B}']
    function Beginsum(const a: Integer; const b: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetNum(const proNum: UnicodeString; const intoNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetOrderData(const puStatus: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegindelNum(const comNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetOrderDtList(const puOrderNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetLocation(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetCompany(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetUser(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginaddInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString; const userId: UnicodeString;
                               const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString; const memo: UnicodeString; const partnersId: UnicodeString;
                               const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString;
                               const idCardNumAllStr: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginaddOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString; const outDate: UnicodeString; const operatorId: UnicodeString;
                               const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const qtyStr: UnicodeString;
                               const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString; const idCardNumStr: UnicodeString; const oddDtIdStr: UnicodeString; const aCallback: TROAsyncCallback;
                               const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetInstorageDt(const inCode: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetInCode(const idCardNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetProduct(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegincheckSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const repertoryIdStr: UnicodeString; const checkdtQtyStr: UnicodeString; const checkdtProfitStr: UnicodeString;
                          const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString; const detailQtyStr: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Endsum(const aRequest: IROAsyncRequest): Integer;
    function EndgetNum(const aRequest: IROAsyncRequest): string;
    function EndgetOrderData(const aRequest: IROAsyncRequest): string;
    procedure EnddelNum(const aRequest: IROAsyncRequest);
    function EndgetOrderDtList(const aRequest: IROAsyncRequest): string;
    function EndgetLocation(const aRequest: IROAsyncRequest): string;
    function EndgetCompany(const aRequest: IROAsyncRequest): string;
    function EndgetUser(const aRequest: IROAsyncRequest): string;
    function EndaddInstorage(const aRequest: IROAsyncRequest): string;
    function EndaddOrderBack(const aRequest: IROAsyncRequest): string;
    function EndgetInstorageData(const aRequest: IROAsyncRequest): string;
    function EndgetInstorageDt(const aRequest: IROAsyncRequest): string;
    function EndgetInCode(const aRequest: IROAsyncRequest): string;
    function EndgetProduct(const aRequest: IROAsyncRequest): string;
    function EndcheckSt(const aRequest: IROAsyncRequest): string;
  end;

  CoAndroidService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAndroidService; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAndroidService; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IAndroidService; overload;
  end;

  CoAndroidService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAndroidService_Async; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAndroidService_Async; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IAndroidService_Async; overload;
  end;

  CoAndroidService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAndroidService_AsyncEx; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAndroidService_AsyncEx; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): IAndroidService_AsyncEx; overload;
  end;

  TAndroidService_Proxy = class(TROProxy, IAndroidService)
  protected
    function __GetInterfaceName: String; override;
    function sum(const a: Integer; const b: Integer): Integer;
    function getNum(const proNum: UnicodeString; const intoNum: UnicodeString): string;
    function getOrderData(const puStatus: UnicodeString): string;
    procedure delNum(const comNum: UnicodeString);
    function getOrderDtList(const puOrderNum: UnicodeString): string;
    function getLocation: string;
    function getCompany: string;
    function getUser: string;
    function addInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString; const userId: UnicodeString;
                          const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString; const memo: UnicodeString; const partnersId: UnicodeString;
                          const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString;
                          const idCardNumAllStr: UnicodeString): string;
    function addOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString; const outDate: UnicodeString; const operatorId: UnicodeString;
                          const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const qtyStr: UnicodeString;
                          const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString; const idCardNumStr: UnicodeString; const oddDtIdStr: UnicodeString): string;
    function getInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString): string;
    function getInstorageDt(const inCode: UnicodeString): string;
    function getInCode(const idCardNum: UnicodeString): string;
    function getProduct: string;
    function checkSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const repertoryIdStr: UnicodeString; const checkdtQtyStr: UnicodeString; const checkdtProfitStr: UnicodeString;
                     const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString; const detailQtyStr: UnicodeString): string;
  end;

  TAndroidService_AsyncProxy = class(TROAsyncProxy, IAndroidService_Async)
  protected
    function __GetInterfaceName: String; override;
    procedure Invoke_sum(const a: Integer; const b: Integer);
    procedure Invoke_getNum(const proNum: UnicodeString; const intoNum: UnicodeString);
    procedure Invoke_getOrderData(const puStatus: UnicodeString);
    procedure Invoke_delNum(const comNum: UnicodeString);
    procedure Invoke_getOrderDtList(const puOrderNum: UnicodeString);
    procedure Invoke_getLocation;
    procedure Invoke_getCompany;
    procedure Invoke_getUser;
    procedure Invoke_addInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString; const userId: UnicodeString;
                                  const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString; const memo: UnicodeString; const partnersId: UnicodeString;
                                  const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString;
                                  const idCardNumAllStr: UnicodeString);
    procedure Invoke_addOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString; const outDate: UnicodeString; const operatorId: UnicodeString;
                                  const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const qtyStr: UnicodeString;
                                  const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString; const idCardNumStr: UnicodeString; const oddDtIdStr: UnicodeString);
    procedure Invoke_getInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString);
    procedure Invoke_getInstorageDt(const inCode: UnicodeString);
    procedure Invoke_getInCode(const idCardNum: UnicodeString);
    procedure Invoke_getProduct;
    procedure Invoke_checkSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const repertoryIdStr: UnicodeString; const checkdtQtyStr: UnicodeString; const checkdtProfitStr: UnicodeString;
                             const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString; const detailQtyStr: UnicodeString);
    function Retrieve_sum: Integer;
    function Retrieve_getNum: string;
    function Retrieve_getOrderData: string;
    function Retrieve_getOrderDtList: string;
    function Retrieve_getLocation: string;
    function Retrieve_getCompany: string;
    function Retrieve_getUser: string;
    function Retrieve_addInstorage: string;
    function Retrieve_addOrderBack: string;
    function Retrieve_getInstorageData: string;
    function Retrieve_getInstorageDt: string;
    function Retrieve_getInCode: string;
    function Retrieve_getProduct: string;
    function Retrieve_checkSt: string;
  end;

  TAndroidService_AsyncProxyEx = class(TROAsyncProxyEx, IAndroidService_AsyncEx)
  protected
    function __GetInterfaceName: String; override;
    function Beginsum(const a: Integer; const b: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetNum(const proNum: UnicodeString; const intoNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetOrderData(const puStatus: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegindelNum(const comNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetOrderDtList(const puOrderNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetLocation(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetCompany(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetUser(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginaddInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString; const userId: UnicodeString;
                               const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString; const memo: UnicodeString; const partnersId: UnicodeString;
                               const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString;
                               const idCardNumAllStr: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginaddOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString; const outDate: UnicodeString; const operatorId: UnicodeString;
                               const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const qtyStr: UnicodeString;
                               const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString; const idCardNumStr: UnicodeString; const oddDtIdStr: UnicodeString; const aCallback: TROAsyncCallback;
                               const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetInstorageDt(const inCode: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetInCode(const idCardNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegingetProduct(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BegincheckSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const repertoryIdStr: UnicodeString; const checkdtQtyStr: UnicodeString; const checkdtProfitStr: UnicodeString;
                          const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString; const detailQtyStr: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Endsum(const aRequest: IROAsyncRequest): Integer;
    function EndgetNum(const aRequest: IROAsyncRequest): string;
    function EndgetOrderData(const aRequest: IROAsyncRequest): string;
    procedure EnddelNum(const aRequest: IROAsyncRequest);
    function EndgetOrderDtList(const aRequest: IROAsyncRequest): string;
    function EndgetLocation(const aRequest: IROAsyncRequest): string;
    function EndgetCompany(const aRequest: IROAsyncRequest): string;
    function EndgetUser(const aRequest: IROAsyncRequest): string;
    function EndaddInstorage(const aRequest: IROAsyncRequest): string;
    function EndaddOrderBack(const aRequest: IROAsyncRequest): string;
    function EndgetInstorageData(const aRequest: IROAsyncRequest): string;
    function EndgetInstorageDt(const aRequest: IROAsyncRequest): string;
    function EndgetInCode(const aRequest: IROAsyncRequest): string;
    function EndgetProduct(const aRequest: IROAsyncRequest): string;
    function EndcheckSt(const aRequest: IROAsyncRequest): string;
  end;

function DefaultNamespaces: String;
implementation

uses
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

function DefaultNamespaces: String;
var
  lres: String;
begin
  lres := DefaultNamespace;
  lres := (lres + ';') + DataAbstract4_Intf.DefaultNamespace;
  result := lres;
  exit;
end;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function CoDataService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IDataService;
begin
  result := TDataService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoDataService.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IDataService;
begin
  result := TDataService_Proxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoDataService.Create(const aUrl: String; aDefaultNamespaces: String = ''): IDataService;
begin
  result := TDataService_Proxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoDataService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IDataService_Async;
begin
  result := TDataService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoDataService_Async.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IDataService_Async;
begin
  result := TDataService_AsyncProxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoDataService_Async.Create(const aUrl: String; aDefaultNamespaces: String = ''): IDataService_Async;
begin
  result := TDataService_AsyncProxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoDataService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IDataService_AsyncEx;
begin
  result := TDataService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoDataService_AsyncEx.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IDataService_AsyncEx;
begin
  result := TDataService_AsyncProxyEx.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoDataService_AsyncEx.Create(const aUrl: String; aDefaultNamespaces: String = ''): IDataService_AsyncEx;
begin
  result := TDataService_AsyncProxyEx.Create(aUrl, aDefaultNamespaces);
  exit;
end;

function TDataService_Proxy.__GetInterfaceName: String;
begin
  result := 'DataService';
  exit;
end;

function TDataService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'DataService';
  exit;
end;

function TDataService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'DataService';
  exit;
end;

class function CoLoginService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILoginService;
begin
  result := TLoginService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoLoginService.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILoginService;
begin
  result := TLoginService_Proxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoLoginService.Create(const aUrl: String; aDefaultNamespaces: String = ''): ILoginService;
begin
  result := TLoginService_Proxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoLoginService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILoginService_Async;
begin
  result := TLoginService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoLoginService_Async.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILoginService_Async;
begin
  result := TLoginService_AsyncProxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoLoginService_Async.Create(const aUrl: String; aDefaultNamespaces: String = ''): ILoginService_Async;
begin
  result := TLoginService_AsyncProxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoLoginService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ILoginService_AsyncEx;
begin
  result := TLoginService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoLoginService_AsyncEx.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ILoginService_AsyncEx;
begin
  result := TLoginService_AsyncProxyEx.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoLoginService_AsyncEx.Create(const aUrl: String; aDefaultNamespaces: String = ''): ILoginService_AsyncEx;
begin
  result := TLoginService_AsyncProxyEx.Create(aUrl, aDefaultNamespaces);
  exit;
end;

function TLoginService_Proxy.__GetInterfaceName: String;
begin
  result := 'LoginService';
  exit;
end;

function TLoginService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'LoginService';
  exit;
end;

function TLoginService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'LoginService';
  exit;
end;

class function CoAndroidService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAndroidService;
begin
  result := TAndroidService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoAndroidService.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAndroidService;
begin
  result := TAndroidService_Proxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoAndroidService.Create(const aUrl: String; aDefaultNamespaces: String = ''): IAndroidService;
begin
  result := TAndroidService_Proxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoAndroidService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAndroidService_Async;
begin
  result := TAndroidService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoAndroidService_Async.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAndroidService_Async;
begin
  result := TAndroidService_AsyncProxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoAndroidService_Async.Create(const aUrl: String; aDefaultNamespaces: String = ''): IAndroidService_Async;
begin
  result := TAndroidService_AsyncProxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoAndroidService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IAndroidService_AsyncEx;
begin
  result := TAndroidService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoAndroidService_AsyncEx.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): IAndroidService_AsyncEx;
begin
  result := TAndroidService_AsyncProxyEx.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoAndroidService_AsyncEx.Create(const aUrl: String; aDefaultNamespaces: String = ''): IAndroidService_AsyncEx;
begin
  result := TAndroidService_AsyncProxyEx.Create(aUrl, aDefaultNamespaces);
  exit;
end;

function TAndroidService_Proxy.__GetInterfaceName: String;
begin
  result := 'AndroidService';
  exit;
end;

function TAndroidService_Proxy.sum(const a: Integer; const b: Integer): Integer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: Integer;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'sum');
    lMessage.Write('a', System.TypeInfo(Integer), a, []);
    lMessage.Write('b', System.TypeInfo(Integer), b, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(Integer), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.getNum(const proNum: UnicodeString; const intoNum: UnicodeString): string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getNum');
    lMessage.Write('proNum', System.TypeInfo(UnicodeString), proNum, []);
    lMessage.Write('intoNum', System.TypeInfo(UnicodeString), intoNum, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsAnsiString]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.getOrderData(const puStatus: UnicodeString): string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getOrderData');
    lMessage.Write('puStatus', System.TypeInfo(UnicodeString), puStatus, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

procedure TAndroidService_Proxy.delNum(const comNum: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'delNum');
    lMessage.Write('comNum', System.TypeInfo(UnicodeString), comNum, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TAndroidService_Proxy.getOrderDtList(const puOrderNum: UnicodeString): string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getOrderDtList');
    lMessage.Write('puOrderNum', System.TypeInfo(UnicodeString), puOrderNum, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.getLocation: string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getLocation');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.getCompany: string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getCompany');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.getUser: string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getUser');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.addInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString; const userId: UnicodeString;
                                            const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString; const memo: UnicodeString; const partnersId: UnicodeString;
                                            const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString;
                                            const stateStr: UnicodeString; const idCardNumAllStr: UnicodeString): string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'addInstorage');
    lMessage.Write('inCode', System.TypeInfo(UnicodeString), inCode, []);
    lMessage.Write('inType', System.TypeInfo(UnicodeString), inType, []);
    lMessage.Write('locationId', System.TypeInfo(UnicodeString), locationId, []);
    lMessage.Write('companyId', System.TypeInfo(UnicodeString), companyId, []);
    lMessage.Write('inDate', System.TypeInfo(UnicodeString), inDate, []);
    lMessage.Write('userId', System.TypeInfo(UnicodeString), userId, []);
    lMessage.Write('operatorId', System.TypeInfo(UnicodeString), operatorId, []);
    lMessage.Write('inState', System.TypeInfo(UnicodeString), inState, []);
    lMessage.Write('oddNo', System.TypeInfo(UnicodeString), oddNo, []);
    lMessage.Write('department', System.TypeInfo(UnicodeString), department, []);
    lMessage.Write('memo', System.TypeInfo(UnicodeString), memo, []);
    lMessage.Write('partnersId', System.TypeInfo(UnicodeString), partnersId, []);
    lMessage.Write('productIdStr', System.TypeInfo(UnicodeString), productIdStr, []);
    lMessage.Write('qtyStr', System.TypeInfo(UnicodeString), qtyStr, []);
    lMessage.Write('priceStr', System.TypeInfo(UnicodeString), priceStr, []);
    lMessage.Write('locationIdStr', System.TypeInfo(UnicodeString), locationIdStr, []);
    lMessage.Write('companyIdStr', System.TypeInfo(UnicodeString), companyIdStr, []);
    lMessage.Write('stateStr', System.TypeInfo(UnicodeString), stateStr, []);
    lMessage.Write('idCardNumAllStr', System.TypeInfo(UnicodeString), idCardNumAllStr, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.addOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString; const outDate: UnicodeString; const operatorId: UnicodeString;
                                            const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString;
                                            const qtyStr: UnicodeString; const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString; const idCardNumStr: UnicodeString;
                                            const oddDtIdStr: UnicodeString): string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'addOrderBack');
    lMessage.Write('outCode', System.TypeInfo(UnicodeString), outCode, []);
    lMessage.Write('outType', System.TypeInfo(UnicodeString), outType, []);
    lMessage.Write('oddNo', System.TypeInfo(UnicodeString), oddNo, []);
    lMessage.Write('outUser', System.TypeInfo(UnicodeString), outUser, []);
    lMessage.Write('outDate', System.TypeInfo(UnicodeString), outDate, []);
    lMessage.Write('operatorId', System.TypeInfo(UnicodeString), operatorId, []);
    lMessage.Write('outState', System.TypeInfo(UnicodeString), outState, []);
    lMessage.Write('memo', System.TypeInfo(UnicodeString), memo, []);
    lMessage.Write('productIdStr', System.TypeInfo(UnicodeString), productIdStr, []);
    lMessage.Write('locationIdStr', System.TypeInfo(UnicodeString), locationIdStr, []);
    lMessage.Write('companyIdStr', System.TypeInfo(UnicodeString), companyIdStr, []);
    lMessage.Write('qtyStr', System.TypeInfo(UnicodeString), qtyStr, []);
    lMessage.Write('priceStr', System.TypeInfo(UnicodeString), priceStr, []);
    lMessage.Write('stateStr', System.TypeInfo(UnicodeString), stateStr, []);
    lMessage.Write('partnersId', System.TypeInfo(UnicodeString), partnersId, []);
    lMessage.Write('idCardNumStr', System.TypeInfo(UnicodeString), idCardNumStr, []);
    lMessage.Write('oddDtIdStr', System.TypeInfo(UnicodeString), oddDtIdStr, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.getInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString): string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getInstorageData');
    lMessage.Write('inState', System.TypeInfo(UnicodeString), inState, []);
    lMessage.Write('locationId', System.TypeInfo(UnicodeString), locationId, []);
    lMessage.Write('companyId', System.TypeInfo(UnicodeString), companyId, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.getInstorageDt(const inCode: UnicodeString): string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getInstorageDt');
    lMessage.Write('inCode', System.TypeInfo(UnicodeString), inCode, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.getInCode(const idCardNum: UnicodeString): string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getInCode');
    lMessage.Write('idCardNum', System.TypeInfo(UnicodeString), idCardNum, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.getProduct: string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getProduct');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_Proxy.checkSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const repertoryIdStr: UnicodeString; const checkdtQtyStr: UnicodeString; const checkdtProfitStr: UnicodeString;
                                       const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString; const detailQtyStr: UnicodeString): string;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'checkSt');
    lMessage.Write('checkNum', System.TypeInfo(UnicodeString), checkNum, []);
    lMessage.Write('checkUser', System.TypeInfo(Integer), checkUser, []);
    lMessage.Write('memo', System.TypeInfo(UnicodeString), memo, []);
    lMessage.Write('repertoryIdStr', System.TypeInfo(UnicodeString), repertoryIdStr, []);
    lMessage.Write('checkdtQtyStr', System.TypeInfo(UnicodeString), checkdtQtyStr, []);
    lMessage.Write('checkdtProfitStr', System.TypeInfo(UnicodeString), checkdtProfitStr, []);
    lMessage.Write('idCardNumStr', System.TypeInfo(UnicodeString), idCardNumStr, []);
    lMessage.Write('recordTypeStr', System.TypeInfo(UnicodeString), recordTypeStr, []);
    lMessage.Write('detailQtyStr', System.TypeInfo(UnicodeString), detailQtyStr, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'AndroidService';
  exit;
end;

procedure TAndroidService_AsyncProxy.Invoke_sum(const a: Integer; const b: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('sum');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'sum');
    lMessage.Write('a', System.TypeInfo(Integer), a, []);
    lMessage.Write('b', System.TypeInfo(Integer), b, []);
    __DispatchAsyncRequest('sum', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getNum(const proNum: UnicodeString; const intoNum: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getNum');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getNum');
    lMessage.Write('proNum', System.TypeInfo(UnicodeString), proNum, []);
    lMessage.Write('intoNum', System.TypeInfo(UnicodeString), intoNum, []);
    __DispatchAsyncRequest('getNum', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getOrderData(const puStatus: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getOrderData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getOrderData');
    lMessage.Write('puStatus', System.TypeInfo(UnicodeString), puStatus, []);
    __DispatchAsyncRequest('getOrderData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_delNum(const comNum: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('delNum');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'delNum');
    lMessage.Write('comNum', System.TypeInfo(UnicodeString), comNum, []);
    __DispatchAsyncRequest('delNum', lMessage, false);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getOrderDtList(const puOrderNum: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getOrderDtList');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getOrderDtList');
    lMessage.Write('puOrderNum', System.TypeInfo(UnicodeString), puOrderNum, []);
    __DispatchAsyncRequest('getOrderDtList', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getLocation;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getLocation');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getLocation');
    __DispatchAsyncRequest('getLocation', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getCompany;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getCompany');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getCompany');
    __DispatchAsyncRequest('getCompany', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getUser;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getUser');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getUser');
    __DispatchAsyncRequest('getUser', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_addInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString;
                                                         const userId: UnicodeString; const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString;
                                                         const memo: UnicodeString; const partnersId: UnicodeString; const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString;
                                                         const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString; const idCardNumAllStr: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('addInstorage');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'addInstorage');
    lMessage.Write('inCode', System.TypeInfo(UnicodeString), inCode, []);
    lMessage.Write('inType', System.TypeInfo(UnicodeString), inType, []);
    lMessage.Write('locationId', System.TypeInfo(UnicodeString), locationId, []);
    lMessage.Write('companyId', System.TypeInfo(UnicodeString), companyId, []);
    lMessage.Write('inDate', System.TypeInfo(UnicodeString), inDate, []);
    lMessage.Write('userId', System.TypeInfo(UnicodeString), userId, []);
    lMessage.Write('operatorId', System.TypeInfo(UnicodeString), operatorId, []);
    lMessage.Write('inState', System.TypeInfo(UnicodeString), inState, []);
    lMessage.Write('oddNo', System.TypeInfo(UnicodeString), oddNo, []);
    lMessage.Write('department', System.TypeInfo(UnicodeString), department, []);
    lMessage.Write('memo', System.TypeInfo(UnicodeString), memo, []);
    lMessage.Write('partnersId', System.TypeInfo(UnicodeString), partnersId, []);
    lMessage.Write('productIdStr', System.TypeInfo(UnicodeString), productIdStr, []);
    lMessage.Write('qtyStr', System.TypeInfo(UnicodeString), qtyStr, []);
    lMessage.Write('priceStr', System.TypeInfo(UnicodeString), priceStr, []);
    lMessage.Write('locationIdStr', System.TypeInfo(UnicodeString), locationIdStr, []);
    lMessage.Write('companyIdStr', System.TypeInfo(UnicodeString), companyIdStr, []);
    lMessage.Write('stateStr', System.TypeInfo(UnicodeString), stateStr, []);
    lMessage.Write('idCardNumAllStr', System.TypeInfo(UnicodeString), idCardNumAllStr, []);
    __DispatchAsyncRequest('addInstorage', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_addOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString; const outDate: UnicodeString;
                                                         const operatorId: UnicodeString; const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString;
                                                         const companyIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString;
                                                         const idCardNumStr: UnicodeString; const oddDtIdStr: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('addOrderBack');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'addOrderBack');
    lMessage.Write('outCode', System.TypeInfo(UnicodeString), outCode, []);
    lMessage.Write('outType', System.TypeInfo(UnicodeString), outType, []);
    lMessage.Write('oddNo', System.TypeInfo(UnicodeString), oddNo, []);
    lMessage.Write('outUser', System.TypeInfo(UnicodeString), outUser, []);
    lMessage.Write('outDate', System.TypeInfo(UnicodeString), outDate, []);
    lMessage.Write('operatorId', System.TypeInfo(UnicodeString), operatorId, []);
    lMessage.Write('outState', System.TypeInfo(UnicodeString), outState, []);
    lMessage.Write('memo', System.TypeInfo(UnicodeString), memo, []);
    lMessage.Write('productIdStr', System.TypeInfo(UnicodeString), productIdStr, []);
    lMessage.Write('locationIdStr', System.TypeInfo(UnicodeString), locationIdStr, []);
    lMessage.Write('companyIdStr', System.TypeInfo(UnicodeString), companyIdStr, []);
    lMessage.Write('qtyStr', System.TypeInfo(UnicodeString), qtyStr, []);
    lMessage.Write('priceStr', System.TypeInfo(UnicodeString), priceStr, []);
    lMessage.Write('stateStr', System.TypeInfo(UnicodeString), stateStr, []);
    lMessage.Write('partnersId', System.TypeInfo(UnicodeString), partnersId, []);
    lMessage.Write('idCardNumStr', System.TypeInfo(UnicodeString), idCardNumStr, []);
    lMessage.Write('oddDtIdStr', System.TypeInfo(UnicodeString), oddDtIdStr, []);
    __DispatchAsyncRequest('addOrderBack', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getInstorageData');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getInstorageData');
    lMessage.Write('inState', System.TypeInfo(UnicodeString), inState, []);
    lMessage.Write('locationId', System.TypeInfo(UnicodeString), locationId, []);
    lMessage.Write('companyId', System.TypeInfo(UnicodeString), companyId, []);
    __DispatchAsyncRequest('getInstorageData', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getInstorageDt(const inCode: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getInstorageDt');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getInstorageDt');
    lMessage.Write('inCode', System.TypeInfo(UnicodeString), inCode, []);
    __DispatchAsyncRequest('getInstorageDt', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getInCode(const idCardNum: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getInCode');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getInCode');
    lMessage.Write('idCardNum', System.TypeInfo(UnicodeString), idCardNum, []);
    __DispatchAsyncRequest('getInCode', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_getProduct;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('getProduct');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getProduct');
    __DispatchAsyncRequest('getProduct', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TAndroidService_AsyncProxy.Invoke_checkSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const repertoryIdStr: UnicodeString; const checkdtQtyStr: UnicodeString;
                                                    const checkdtProfitStr: UnicodeString; const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString; const detailQtyStr: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('checkSt');

    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'checkSt');
    lMessage.Write('checkNum', System.TypeInfo(UnicodeString), checkNum, []);
    lMessage.Write('checkUser', System.TypeInfo(Integer), checkUser, []);
    lMessage.Write('memo', System.TypeInfo(UnicodeString), memo, []);
    lMessage.Write('repertoryIdStr', System.TypeInfo(UnicodeString), repertoryIdStr, []);
    lMessage.Write('checkdtQtyStr', System.TypeInfo(UnicodeString), checkdtQtyStr, []);
    lMessage.Write('checkdtProfitStr', System.TypeInfo(UnicodeString), checkdtProfitStr, []);
    lMessage.Write('idCardNumStr', System.TypeInfo(UnicodeString), idCardNumStr, []);
    lMessage.Write('recordTypeStr', System.TypeInfo(UnicodeString), recordTypeStr, []);
    lMessage.Write('detailQtyStr', System.TypeInfo(UnicodeString), detailQtyStr, []);
    __DispatchAsyncRequest('checkSt', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TAndroidService_AsyncProxy.Retrieve_sum: Integer;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: Integer;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('sum');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(Integer), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getNum: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getNum');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsAnsiString]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getOrderData: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getOrderData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getOrderDtList: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getOrderDtList');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getLocation: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getLocation');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getCompany: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getCompany');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getUser: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getUser');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_addInstorage: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('addInstorage');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_addOrderBack: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('addOrderBack');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getInstorageData: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getInstorageData');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getInstorageDt: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getInstorageDt');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getInCode: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getInCode');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_getProduct: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('getProduct');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxy.Retrieve_checkSt: string;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: string;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('checkSt');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'AndroidService';
  exit;
end;

function TAndroidService_AsyncProxyEx.Beginsum(const a: Integer; const b: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'sum');
    lMessage.Write('a', System.TypeInfo(Integer), a, []);
    lMessage.Write('b', System.TypeInfo(Integer), b, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetNum(const proNum: UnicodeString; const intoNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getNum');
    lMessage.Write('proNum', System.TypeInfo(UnicodeString), proNum, []);
    lMessage.Write('intoNum', System.TypeInfo(UnicodeString), intoNum, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetOrderData(const puStatus: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getOrderData');
    lMessage.Write('puStatus', System.TypeInfo(UnicodeString), puStatus, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegindelNum(const comNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'delNum');
    lMessage.Write('comNum', System.TypeInfo(UnicodeString), comNum, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetOrderDtList(const puOrderNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getOrderDtList');
    lMessage.Write('puOrderNum', System.TypeInfo(UnicodeString), puOrderNum, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetLocation(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getLocation');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetCompany(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getCompany');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetUser(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getUser');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BeginaddInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString;
                                                        const userId: UnicodeString; const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString;
                                                        const memo: UnicodeString; const partnersId: UnicodeString; const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString;
                                                        const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString; const idCardNumAllStr: UnicodeString; const aCallback: TROAsyncCallback;
                                                        const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'addInstorage');
    lMessage.Write('inCode', System.TypeInfo(UnicodeString), inCode, []);
    lMessage.Write('inType', System.TypeInfo(UnicodeString), inType, []);
    lMessage.Write('locationId', System.TypeInfo(UnicodeString), locationId, []);
    lMessage.Write('companyId', System.TypeInfo(UnicodeString), companyId, []);
    lMessage.Write('inDate', System.TypeInfo(UnicodeString), inDate, []);
    lMessage.Write('userId', System.TypeInfo(UnicodeString), userId, []);
    lMessage.Write('operatorId', System.TypeInfo(UnicodeString), operatorId, []);
    lMessage.Write('inState', System.TypeInfo(UnicodeString), inState, []);
    lMessage.Write('oddNo', System.TypeInfo(UnicodeString), oddNo, []);
    lMessage.Write('department', System.TypeInfo(UnicodeString), department, []);
    lMessage.Write('memo', System.TypeInfo(UnicodeString), memo, []);
    lMessage.Write('partnersId', System.TypeInfo(UnicodeString), partnersId, []);
    lMessage.Write('productIdStr', System.TypeInfo(UnicodeString), productIdStr, []);
    lMessage.Write('qtyStr', System.TypeInfo(UnicodeString), qtyStr, []);
    lMessage.Write('priceStr', System.TypeInfo(UnicodeString), priceStr, []);
    lMessage.Write('locationIdStr', System.TypeInfo(UnicodeString), locationIdStr, []);
    lMessage.Write('companyIdStr', System.TypeInfo(UnicodeString), companyIdStr, []);
    lMessage.Write('stateStr', System.TypeInfo(UnicodeString), stateStr, []);
    lMessage.Write('idCardNumAllStr', System.TypeInfo(UnicodeString), idCardNumAllStr, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BeginaddOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString; const outDate: UnicodeString;
                                                        const operatorId: UnicodeString; const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString;
                                                        const companyIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString;
                                                        const idCardNumStr: UnicodeString; const oddDtIdStr: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'addOrderBack');
    lMessage.Write('outCode', System.TypeInfo(UnicodeString), outCode, []);
    lMessage.Write('outType', System.TypeInfo(UnicodeString), outType, []);
    lMessage.Write('oddNo', System.TypeInfo(UnicodeString), oddNo, []);
    lMessage.Write('outUser', System.TypeInfo(UnicodeString), outUser, []);
    lMessage.Write('outDate', System.TypeInfo(UnicodeString), outDate, []);
    lMessage.Write('operatorId', System.TypeInfo(UnicodeString), operatorId, []);
    lMessage.Write('outState', System.TypeInfo(UnicodeString), outState, []);
    lMessage.Write('memo', System.TypeInfo(UnicodeString), memo, []);
    lMessage.Write('productIdStr', System.TypeInfo(UnicodeString), productIdStr, []);
    lMessage.Write('locationIdStr', System.TypeInfo(UnicodeString), locationIdStr, []);
    lMessage.Write('companyIdStr', System.TypeInfo(UnicodeString), companyIdStr, []);
    lMessage.Write('qtyStr', System.TypeInfo(UnicodeString), qtyStr, []);
    lMessage.Write('priceStr', System.TypeInfo(UnicodeString), priceStr, []);
    lMessage.Write('stateStr', System.TypeInfo(UnicodeString), stateStr, []);
    lMessage.Write('partnersId', System.TypeInfo(UnicodeString), partnersId, []);
    lMessage.Write('idCardNumStr', System.TypeInfo(UnicodeString), idCardNumStr, []);
    lMessage.Write('oddDtIdStr', System.TypeInfo(UnicodeString), oddDtIdStr, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getInstorageData');
    lMessage.Write('inState', System.TypeInfo(UnicodeString), inState, []);
    lMessage.Write('locationId', System.TypeInfo(UnicodeString), locationId, []);
    lMessage.Write('companyId', System.TypeInfo(UnicodeString), companyId, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetInstorageDt(const inCode: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getInstorageDt');
    lMessage.Write('inCode', System.TypeInfo(UnicodeString), inCode, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetInCode(const idCardNum: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getInCode');
    lMessage.Write('idCardNum', System.TypeInfo(UnicodeString), idCardNum, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegingetProduct(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'getProduct');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.BegincheckSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const repertoryIdStr: UnicodeString; const checkdtQtyStr: UnicodeString;
                                                   const checkdtProfitStr: UnicodeString; const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString; const detailQtyStr: UnicodeString; const aCallback: TROAsyncCallback;
                                                   const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'sanhe', __InterfaceName, 'checkSt');
    lMessage.Write('checkNum', System.TypeInfo(UnicodeString), checkNum, []);
    lMessage.Write('checkUser', System.TypeInfo(Integer), checkUser, []);
    lMessage.Write('memo', System.TypeInfo(UnicodeString), memo, []);
    lMessage.Write('repertoryIdStr', System.TypeInfo(UnicodeString), repertoryIdStr, []);
    lMessage.Write('checkdtQtyStr', System.TypeInfo(UnicodeString), checkdtQtyStr, []);
    lMessage.Write('checkdtProfitStr', System.TypeInfo(UnicodeString), checkdtProfitStr, []);
    lMessage.Write('idCardNumStr', System.TypeInfo(UnicodeString), idCardNumStr, []);
    lMessage.Write('recordTypeStr', System.TypeInfo(UnicodeString), recordTypeStr, []);
    lMessage.Write('detailQtyStr', System.TypeInfo(UnicodeString), detailQtyStr, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.Endsum(const aRequest: IROAsyncRequest): Integer;
var
  lResult: Integer;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(Integer), lResult, []);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndgetNum(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsAnsiString]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndgetOrderData(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

procedure TAndroidService_AsyncProxyEx.EnddelNum(const aRequest: IROAsyncRequest);
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
end;

function TAndroidService_AsyncProxyEx.EndgetOrderDtList(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndgetLocation(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndgetCompany(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndgetUser(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndaddInstorage(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndaddOrderBack(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndgetInstorageData(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndgetInstorageDt(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndgetInCode(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndgetProduct(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

function TAndroidService_AsyncProxyEx.EndcheckSt(const aRequest: IROAsyncRequest): string;
var
  lResult: string;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
  result := lResult;
  exit;
end;

initialization
  RegisterProxyClass(IDataService_IID, TDataService_Proxy);
  RegisterProxyClass(ILoginService_IID, TLoginService_Proxy);
  RegisterProxyClass(IAndroidService_IID, TAndroidService_Proxy);
finalization
  UnregisterProxyClass(IDataService_IID);
  UnregisterProxyClass(ILoginService_IID);
  UnregisterProxyClass(IAndroidService_IID);
end.

