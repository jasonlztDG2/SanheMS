unit AndroidService_Impl;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
// 
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROEncoding,
  uROXMLIntf,
  uROClientIntf,
  uROClasses,
  uROTypes,
  uROServer,
  uROServerIntf,
  uROSessions,
  uRORemoteDataModule,
  DataAbstract4_Intf,System.json,
  sanhe_Intf, Data.DB, Data.Win.ADODB;

const __ServiceName = 'AndroidService';
type
  { Forward declarations }
  TAndroidService = class;

  TAndroidService = class(TRORemoteDataModule, IAndroidService)
    ADOQuery1: TADOQuery;
  public
    function sum(const a: Integer; const b: Integer): Integer; virtual;
    function getNum(const proNum: String; const intoNum: String): String;
    function getOrderData(const puStatus: UnicodeString): string;
    procedure delNum(const comNum: UnicodeString);
    function getOrderDtList(const puOrderNum: UnicodeString): string;
    function getLocation: string;
    function getCompany: string;
    function getUser: string;
    function addInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString; const userId: UnicodeString;
                          const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString; const memo: UnicodeString; const partnersId: UnicodeString;
                          const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString;
                          const idCardNumAllStr: UnicodeString): string;
   function addOrderBack(const outCode: UnicodeString; const outType: UnicodeString; const oddNo: UnicodeString; const outUser: UnicodeString;
                          const outDate: UnicodeString; const operatorId: UnicodeString; const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString;
                          const companyIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString;
                           const idCardNumStr: UnicodeString;const oddDtIdStr: UnicodeString): string;
    function getInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString): string;
    function getInstorageDt(const inCode: UnicodeString): string;
    function getInCode(const idCardNum: UnicodeString): string;
    function getProduct: string;
    function checkSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString;
                     const checkdtQtyStr: UnicodeString; const checkdtProfitStr: UnicodeString; const repertoryQtyStr: UnicodeString; const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString): string;
    function getRepertoryProduct(const productCode: UnicodeString; const productNum: UnicodeString; const idCardNum: UnicodeString): string;
    function addOutStorage(const outCode: UnicodeString; const outType: UnicodeString; const outUser: UnicodeString; const operatorId: UnicodeString; const outState: UnicodeString; const memo: UnicodeString;
                           const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const stateStr: UnicodeString;
                           const partnersId: UnicodeString; const oddDtIdStr: UnicodeString; const idCardNumStr: UnicodeString): string;
    function getSCOrder(const status: UnicodeString): string;
    function getOrderPr(const orderNum: UnicodeString): string;


    function ToUTF8Encode(str: string): string;
  end;

  var
  fAndroidService: TAndroidService;
implementation

{$IFDEF DELPHIXE2UP}
  {%CLASSGROUP 'System.Classes.TPersistent'}
{$ENDIF}
{$IFNDEF FPC}
  {$R *.dfm}
{$ENDIF}
{$IFDEF FPC}
  {$R *.lfm}
{$ENDIF}

uses
  DataAbstract4_Invk,   fServerForm,
  sanhe_Invk;

var fClassFactory_AndroidService: IROClassFactory;

procedure Create_AndroidService(out anInstance: IInterface);
begin
  anInstance := TAndroidService.Create(nil);
end;

function TAndroidService.ToUTF8Encode(str: string): string;
var
List: TStrings;
tmpStr: AnsiString;
i: Integer;
begin
List := TStringList.Create;
ExtractStrings(['%'], ['%'], PChar(str), List);
SetLength(tmpStr, List.Count);
for i := 0 to List.Count - 1 do
Byte(tmpStr[i+1]) := StrToInt('$' + List[i]);
List.Free;
Result := UTF8Decode(tmpStr);
end;

function TAndroidService.sum(const a: Integer; const b: Integer): Integer;
begin
  result := a + b;
end;

function TAndroidService.getNum(const proNum: String; const intoNum: String): String;
begin
    with self.adoquery1 do
    begin
          close;
          sql.Clear;
          parameters.Clear;
          sql.Add('exec '+proNum+' :@orderType,:@userID,:@resultCode output');//这就是调用存储过程
          parameters.Items[0].Value := intoNum;
          parameters.Items[1].Value := '123';
          execsql;
          result := trim(parameters.Items[2].Value);
     end;
end;


procedure TAndroidService.delNum(const comNum: string);
begin
  with self.adoquery1 do
    begin
          close;
          sql.Clear;
          parameters.Clear;
          sql.Add('exec DelNum :@code');
          parameters.Items[0].Value := comNum;
          execsql;
     end;
end;

function TAndroidService.getOrderData(const puStatus: string): string;
var
A : Array of String;//定义动态数组
  temp : WideString;
  all: TJSONObject;
  team: TJSONArray;
  order: TJSONObject;
begin

    all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('order',team);
    temp := ToUTF8Encode(puStatus);


    with self.adoquery1 do
    begin
          close;
          if temp = '' then
           sql.Add('SELECT puOrderNum,partnerId,puOrderUser,puCreator,name,company,fullName FROM pu_order,p_partners,' +
                    'p_user where pu_order.partnerId=p_partners.ID and '+
                    'pu_order.puOrderUser=p_user.ID')
          else
          sql.Add(  'SELECT puOrderNum,partnerId,puOrderUser,puCreator,name,company,fullName FROM pu_order,p_partners,' +
                    'p_user where pu_order.partnerId=p_partners.ID and '+
                    'pu_order.puOrderUser=p_user.ID and puStatus=N''' + temp + '''');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

     While Not adoquery1.Eof Do
     begin
         order := TJSONObject.Create;
         order.AddPair( TJSONPair.Create('puOrderNum',adoquery1.FieldByName('puOrderNum').AsString.Trim));
         order.AddPair( TJSONPair.Create('partnerId',adoquery1.FieldByName('partnerId').AsString.Trim));
         order.AddPair( TJSONPair.Create('name',adoquery1.FieldByName('name').AsString.Trim));
         order.AddPair( TJSONPair.Create('company',adoquery1.FieldByName('company').AsString.Trim));
         order.AddPair( TJSONPair.Create('fullName',adoquery1.FieldByName('fullName').AsString.Trim));
         team.AddElement(order);
         adoquery1.Next;
     end;
     result := all.ToString;
end;

function TAndroidService.getOrderDtList(const puOrderNum: UnicodeString): string;
var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  order: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('orderDt',team);

    with self.adoquery1 do
    begin
          close;
          if puOrderNum = '' then
           sql.Add('SELECT * FROM pu_orderDt left join st_product on ' +
                    'pu_orderDt.productID=st_product.productId')
          else
          sql.Add('select * from pu_orderDt left join st_product on ' +
                  'pu_orderDt.productID=st_product.productId where puOrderNum='''+puOrderNum+''' and status=N''未入库''');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

     While Not adoquery1.Eof Do
     begin
         order := TJSONObject.Create;
         order.AddPair( TJSONPair.Create('productName',adoquery1.FieldByName('productName').AsString.Trim));
         order.AddPair( TJSONPair.Create('qty',adoquery1.FieldByName('qty').AsString.Trim));
         order.AddPair( TJSONPair.Create('price',adoquery1.FieldByName('price').AsString.Trim));
         order.AddPair( TJSONPair.Create('productID',adoquery1.FieldByName('productID').AsString.Trim));
         order.AddPair( TJSONPair.Create('id',adoquery1.FieldByName('id').AsString.Trim));
         order.AddPair( TJSONPair.Create('puOrderNum',adoquery1.FieldByName('puOrderNum').AsString.Trim));
         team.AddElement(order);
         adoquery1.Next;
     end;
     result := all.ToString;
end;


function TAndroidService.getInstorageData(const inState: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString): string;
var
A : Array of String;//定义动态数组
  temp : WideString;
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin

    all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('data',team);
    temp := ToUTF8Encode(inState);


    with self.adoquery1 do
    begin
          close;
          if temp = '' then
           sql.Add('SELECT * FROM st_instorage,st_location,st_company ' +
                  'where st_instorage.locationId=st_location.id and ' +
                  'st_instorage.companyId= st_company.id')
          else
          sql.Add(  'SELECT * FROM st_instorage,st_location,st_company ' +
                  'where st_instorage.locationId=st_location.id and ' +
                  'st_instorage.companyId= st_company.id and inState=N''' + temp + '''' +
                   ' and st_instorage.locationId=''' +
                  locationId + ''' and st_instorage.companyId=''' + companyId + '''');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

     While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('inCode',adoquery1.FieldByName('inCode').AsString));
         ob.AddPair( TJSONPair.Create('locationName',adoquery1.FieldByName('locationName').AsString));
         ob.AddPair( TJSONPair.Create('companyName',adoquery1.FieldByName('companyName').AsString));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;

end;

function TAndroidService.getInstorageDt(const inCode: UnicodeString): string;
var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('InstorageDt',team);

    with self.adoquery1 do
    begin
          close;
//          if inCode = '' then
//           sql.Add('SELECT *,st_repertory.id as repertoryId,st_instorageDt.qty as dtQty,'+
//               'st_repertory.qty as stQty FROM st_instorageDt,st_product,' +
//           'st_repertory where st_instorageDt.productId=st_product.productId and '+
//           'st_instorageDt.productId=st_repertory.productId  and st_instorageDt.locationId=st_repertory.locationId'+
//           ' and st_instorageDt.companyId=st_repertory.companyId')
//          else
//          sql.Add('SELECT *,st_repertory.id as repertoryId,st_instorageDt.qty as dtQty,'+
//               'st_repertory.qty as stQty FROM st_instorageDt,st_product,' +
//           'st_repertory where st_instorageDt.productId=st_product.productId and '+
//           'st_instorageDt.productId=st_repertory.productId  and st_instorageDt.locationId=st_repertory.locationId'+
//           ' and st_instorageDt.companyId=st_repertory.companyId and inCode='''+inCode+''' and state=N''待付款''');
             if inCode = '' then
                 sql.Add('SELECT * FROM st_instorageDt,st_product where st_instorageDt.productId=st_product.productId')
             else
                 sql.Add('SELECT * FROM st_instorageDt,st_product'+
                          ' where st_instorageDt.productId=st_product.productId' +
                          ' and inCode=''' +inCode+''' and state=N''待付款''');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

     While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('productName',adoquery1.FieldByName('productName').AsString.Trim));
         ob.AddPair( TJSONPair.Create('qty',adoquery1.FieldByName('qty').AsString.Trim));
         ob.AddPair( TJSONPair.Create('price',adoquery1.FieldByName('price').AsString.Trim));
         ob.AddPair( TJSONPair.Create('productID',adoquery1.FieldByName('productID').AsString.Trim));
         ob.AddPair( TJSONPair.Create('dtId',adoquery1.FieldByName('id').AsString.Trim));
         ob.AddPair( TJSONPair.Create('oddDtId',adoquery1.FieldByName('oddDtId').AsString.Trim));
         ob.AddPair( TJSONPair.Create('inCode',adoquery1.FieldByName('inCode').AsString.Trim));
         ob.AddPair( TJSONPair.Create('partnersId',adoquery1.FieldByName('partnersId').AsString.Trim));
         ob.AddPair( TJSONPair.Create('locationId',adoquery1.FieldByName('locationId').AsString.Trim));
         ob.AddPair( TJSONPair.Create('companyId',adoquery1.FieldByName('companyId').AsString.Trim));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;
end;
 //获取有效的记录详情
function TAndroidService.getInCode(const idCardNum: UnicodeString): string;
  var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('data',team);

    with self.adoquery1 do
    begin
          close;
          if idCardNum = '' then
            sql.Add('select * from st_repertoryDetail as dt where ' +
           ' dt.idCardNum!='''' and dt.inCode!=''''')
          else
            sql.Add('select * from st_repertoryDetail as dt where ' +
           ' dt.idCardNum=''' + idCardNum + '''  and dt.inCode!=''''');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

     While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('id',adoquery1.FieldByName('ID').AsString));
         ob.AddPair( TJSONPair.Create('idCardNum',adoquery1.FieldByName('idCardNum').AsString));
         ob.AddPair( TJSONPair.Create('qty',adoquery1.FieldByName('qty').AsString));
         ob.AddPair( TJSONPair.Create('inCode',adoquery1.FieldByName('incode').AsString));
         ob.AddPair( TJSONPair.Create('dtId',adoquery1.FieldByName('dtId').AsString));
         ob.AddPair( TJSONPair.Create('productId',adoquery1.FieldByName('productId').AsString));
         ob.AddPair( TJSONPair.Create('locationId',adoquery1.FieldByName('locationId').AsString));
         ob.AddPair( TJSONPair.Create('companyId',adoquery1.FieldByName('companyId').AsString));
         ob.AddPair( TJSONPair.Create('recordType',adoquery1.FieldByName('recordType').AsString));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;
end;


function TAndroidService.getLocation: string;
var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('location',team);

    with self.adoquery1 do
    begin
          close;
          sql.Add('select * from st_location');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

   While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('id',adoquery1.FieldByName('id').AsString));
         ob.AddPair( TJSONPair.Create('locationName',adoquery1.FieldByName('locationName').AsString));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;
end;

function TAndroidService.getCompany: string;
var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('company',team);

    with self.adoquery1 do
    begin
          close;
          sql.Add('select * from st_company');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

   While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('id',adoquery1.FieldByName('id').AsString));
         ob.AddPair( TJSONPair.Create('CompanyName',adoquery1.FieldByName('CompanyName').AsString));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;

end;

function TAndroidService.getProduct: string;
var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('product',team);

    with self.adoquery1 do
    begin
          close;
          sql.Add('select * from st_product');
//          sql.Add('select * from st_product where productType=N''材料''');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

   While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('productId',adoquery1.FieldByName('productId').AsString));
         ob.AddPair( TJSONPair.Create('productName',adoquery1.FieldByName('productName').AsString));
         ob.AddPair( TJSONPair.Create('price',adoquery1.FieldByName('price').AsString));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;

end;

function TAndroidService.getUser: string;
var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('user',team);

    with self.adoquery1 do
    begin
          close;
          sql.Add('select * from p_user');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

   While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('id',adoquery1.FieldByName('id').AsString));
         ob.AddPair( TJSONPair.Create('fullName',adoquery1.FieldByName('fullName').AsString));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;

end;

function TAndroidService.getSCOrder(const status: UnicodeString): string;
var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('data',team);

    with self.adoquery1 do
    begin
          close;
          sql.Add('select * from pu_seOrder left join st_product on '+
          'pu_seOrder.productId=st_product.productId where seStatus=N'''+status+'''');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

   While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('seOrderNum',adoquery1.FieldByName('seOrderNum').AsString));
         ob.AddPair( TJSONPair.Create('partnersId',adoquery1.FieldByName('partnersId').AsString));
         ob.AddPair( TJSONPair.Create('structureNum',adoquery1.FieldByName('structureNum').AsString));
         ob.AddPair( TJSONPair.Create('qty',adoquery1.FieldByName('qty').AsString));
         ob.AddPair( TJSONPair.Create('productId',adoquery1.FieldByName('productId').AsString));
         ob.AddPair( TJSONPair.Create('productName',adoquery1.FieldByName('productName').AsString));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;

end;

function TAndroidService.getOrderPr(const orderNum: UnicodeString): string;
 var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('data',team);

    with self.adoquery1 do
    begin
          close;
          sql.Add('select * from pu_seOrderpr left join st_product on '+
          'pu_seOrderpr.productId=st_product.productId where seOrderNum=N'''+orderNum+'''');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

   While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('seOrderNum',adoquery1.FieldByName('seOrderNum').AsString));
         ob.AddPair( TJSONPair.Create('qty',adoquery1.FieldByName('qty').AsString));
         ob.AddPair( TJSONPair.Create('productId',adoquery1.FieldByName('productId').AsString));
         ob.AddPair( TJSONPair.Create('productName',adoquery1.FieldByName('productName').AsString));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;

end;



function TAndroidService.addInstorage(const inCode: UnicodeString; const inType: UnicodeString; const locationId: UnicodeString; const companyId: UnicodeString; const inDate: UnicodeString; const userId: UnicodeString;
                          const operatorId: UnicodeString; const inState: UnicodeString; const oddNo: UnicodeString; const department: UnicodeString; const memo: UnicodeString; const partnersId: UnicodeString;
                          const productIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const stateStr: UnicodeString;
                          const idCardNumAllStr: UnicodeString): string;
begin
  with self.adoquery1 do
    begin
          close;
          sql.Clear;
          parameters.Clear;
          sql.Add('exec addInstorage :@inCode,:@inType,:@locationId,:@companyId,:@inDate,'
                  + ':@consignee,:@operator,:@inState,:@department,:@memo,'
                  + ':@partnersIdStr,:@productIdStr,:@qtyStr,:@priceStr,:@locationIdStr,'
                  + ':@companyIdStr,:@stateStr,:@oddStr,'
                  + ':@idCardNumAllStr,:@successResult output'
                  );//这就是调用存储过程
          parameters.Items[0].Value := inCode;
          parameters.Items[1].Value := inType;
          parameters.Items[2].Value := locationId;
          parameters.Items[3].Value := companyId;
          parameters.Items[4].Value := inDate;
          parameters.Items[5].Value := userId;
          parameters.Items[6].Value := operatorId;
          parameters.Items[7].Value := inState;
          parameters.Items[8].Value := department;
          parameters.Items[9].Value := memo;
          parameters.Items[10].Value := partnersId;
          parameters.Items[11].Value := productIdStr;
          parameters.Items[12].Value := qtyStr;
          parameters.Items[13].Value := priceStr;
          parameters.Items[14].Value := locationIdStr;
          parameters.Items[15].Value := companyIdStr;
          parameters.Items[16].Value := stateStr;
          parameters.Items[17].Value := oddNo;
          parameters.Items[18].Value := idCardNumAllStr;
          execsql;
          result := parameters.Items[19].Value;
     end;
end;


function TAndroidService.addOrderBack(const outCode: UnicodeString; const outType: UnicodeString;const oddNo: UnicodeString; const outUser: UnicodeString;
                          const outDate: UnicodeString; const operatorId: UnicodeString; const outState: UnicodeString; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString;
                          const companyIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const stateStr: UnicodeString; const partnersId: UnicodeString;
                           const idCardNumStr: UnicodeString;const oddDtIdStr: UnicodeString): string;
begin
     with self.adoquery1 do
     begin
        close;
        sql.Clear;
        parameters.Clear;
        sql.Add( 'exec addOrderBack :@outCode,:@outType,:@outUser,:@outDate,:@operator,'
         + ':@outState,:@memo,:@productIdStr,:locationIdStr,:@companyIdStr,:@qtyStr,'
        + ':@priceStr,:@stateStr,:@partnersId,:@oddNo,:@oddDtIdStr,:@idCardNumStr,:@successResult output'
        );

        parameters.Items[0].Value := outCode;
          parameters.Items[1].Value := outType;
          parameters.Items[2].Value := outUser;
          parameters.Items[3].Value := outDate;
          parameters.Items[4].Value := operatorId;
          parameters.Items[5].Value := outState;
          parameters.Items[6].Value := memo;
          parameters.Items[7].Value := productIdStr;
          parameters.Items[8].Value := locationIdStr;
          parameters.Items[9].Value := companyIdStr;
          parameters.Items[10].Value := qtyStr;
          parameters.Items[11].Value := priceStr;
          parameters.Items[12].Value := stateStr;
          parameters.Items[13].Value := partnersId;
          parameters.Items[14].Value := oddNo;
          parameters.Items[15].Value := oddDtIdStr;
          parameters.Items[16].Value := idCardNumStr;
          execsql;
          result := parameters.Items[17].Value;
     end;
end;

function TAndroidService.checkSt(const checkNum: UnicodeString; const checkUser: Integer; const memo: UnicodeString; const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString;
                     const checkdtQtyStr: UnicodeString; const checkdtProfitStr: UnicodeString; const repertoryQtyStr: UnicodeString; const idCardNumStr: UnicodeString; const recordTypeStr: UnicodeString): string;
begin
     with self.adoquery1 do
     begin
        close;
        sql.Clear;
        parameters.Clear;
        sql.Add( 'exec addCheck :@checkNum,:@checkUser,:@memo,:@productIdStr,'
         + ':@locationIdStr,:@companyIdStr,:@checkdtQtyStr,:@checkdtProfitStr,'
        + ':@repertoryQtyStr,:@idCardNumStr,:@recordTypeStr,:@successResult output'
        );

        parameters.Items[0].Value := checkNum;
          parameters.Items[1].Value := checkUser;
          parameters.Items[2].Value := memo;
          parameters.Items[3].Value := productIdStr;
          parameters.Items[4].Value := locationIdStr;
          parameters.Items[5].Value := companyIdStr;
          parameters.Items[6].Value := checkdtQtyStr;
          parameters.Items[7].Value := checkdtProfitStr;
          parameters.Items[8].Value := repertoryQtyStr;
          parameters.Items[9].Value := idCardNumStr;
          parameters.Items[10].Value := recordTypeStr;
          execsql;
          result := parameters.Items[11].Value;
     end;
end;

function TAndroidService.getRepertoryProduct(const productCode: UnicodeString;
const productNum: UnicodeString; const idCardNum: UnicodeString): string;
var
A : Array of String;//定义动态数组
  all: TJSONObject;
  team: TJSONArray;
  ob: TJSONObject;
begin
     all := TJSONObject.Create;
    team := TJSONArray.Create();
    all.AddPair('data',team);

    with self.adoquery1 do
    begin
          close;
          sql.Clear;
          if idCardNum = '' then
            sql.Add('select * from st_product as pr right join ' +
           '(select SUM(qty) as qty,productId as pId,idCardNum,locationId,companyId '+
           ' from st_repertoryDetail group by idCardNum,productId,locationId,companyId) ' +
           ' as re on pr.productId=re.pId where re.idCardNum!='''' ' +
           ' and pr.productName like N''%' + productNum + '%'' '
           );
           if productCode <> '' then
           begin
              sql.Add(' and pr.productCode=''' + productCode + '''')
           end
          else
            sql.Add('select * from st_product as pr right join ' +
           '(select SUM(qty) as qty,productId as pId,idCardNum,locationId,companyId '+
           ' from st_repertoryDetail group by idCardNum,productId,locationId,companyId) ' +
           ' as re on pr.productId=re.pId where re.idCardNum=''' + idCardNum + '''');
          open;
     end;
     Setlength(A,adoquery1.RecordCount);
     adoquery1.First;

     While Not adoquery1.Eof Do
     begin
         ob := TJSONObject.Create;
         ob.AddPair( TJSONPair.Create('productCode',adoquery1.FieldByName('productCode').AsString));
         ob.AddPair( TJSONPair.Create('productName',adoquery1.FieldByName('productName').AsString));
         ob.AddPair( TJSONPair.Create('price',adoquery1.FieldByName('price').AsString));
         ob.AddPair( TJSONPair.Create('spec',adoquery1.FieldByName('spec').AsString));
         ob.AddPair( TJSONPair.Create('color',adoquery1.FieldByName('color').AsString));
         ob.AddPair( TJSONPair.Create('qty',adoquery1.FieldByName('qty').AsString));
         ob.AddPair( TJSONPair.Create('productId',adoquery1.FieldByName('productId').AsString));
         ob.AddPair( TJSONPair.Create('locationId',adoquery1.FieldByName('locationId').AsString));
         ob.AddPair( TJSONPair.Create('companyId',adoquery1.FieldByName('companyId').AsString));
         ob.AddPair( TJSONPair.Create('idCardNum',adoquery1.FieldByName('idCardNum').AsString));
         team.AddElement(ob);
         adoquery1.Next;
     end;
     result := all.ToString;

end;

function TAndroidService.addOutStorage(const outCode: UnicodeString; const outType: UnicodeString; const outUser: UnicodeString; const operatorId: UnicodeString; const outState: UnicodeString; const memo: UnicodeString;
                           const productIdStr: UnicodeString; const locationIdStr: UnicodeString; const companyIdStr: UnicodeString; const qtyStr: UnicodeString; const priceStr: UnicodeString; const stateStr: UnicodeString;
                           const partnersId: UnicodeString; const oddDtIdStr: UnicodeString; const idCardNumStr: UnicodeString): string;
begin
  with self.adoquery1 do
     begin
        close;
        sql.Clear;
        parameters.Clear;
        sql.Add( 'exec addOutStorage :@outCode,:@outType,:@outUser,:@outDate,:@operator,'
         + ':@outState,:@memo,:@productIdStr,:locationIdStr,:@companyIdStr,:@qtyStr,'
        + ':@priceStr,:@stateStr,:@partnersId,:@oddDtIdStr,:@idCardNumStr,:@successResult output'
        );

        parameters.Items[0].Value := outCode;
          parameters.Items[1].Value := outType;
          parameters.Items[2].Value := outUser;
          parameters.Items[3].Value := DateTimeToStr(now());
          parameters.Items[4].Value := operatorId;
          parameters.Items[5].Value := outState;
          parameters.Items[6].Value := memo;
          parameters.Items[7].Value := productIdStr;
          parameters.Items[8].Value := locationIdStr;
          parameters.Items[9].Value := companyIdStr;
          parameters.Items[10].Value := qtyStr;
          parameters.Items[11].Value := priceStr;
          parameters.Items[12].Value := stateStr;
          parameters.Items[13].Value := partnersId;
          parameters.Items[14].Value := oddDtIdStr;
          parameters.Items[15].Value := idCardNumStr;
          execsql;
          result := parameters.Items[16].Value;
     end;
end;




initialization
  fClassFactory_AndroidService := TROClassFactory.Create(__ServiceName, {$IFDEF FPC}@{$ENDIF}Create_AndroidService, TAndroidService_Invoker);
  // RegisterForZeroConf(fClassFactory_AndroidService, '_AndroidService_rosdk._tcp.');
finalization
  UnRegisterClassFactory(fClassFactory_AndroidService);
  fClassFactory_AndroidService := nil;
end.
