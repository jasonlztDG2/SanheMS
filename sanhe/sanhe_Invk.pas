unit sanhe_Invk;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
//
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  uROEncoding,
  uROXMLIntf,
  uROServer,
  uROServerIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  DataAbstract4_Intf,
  DataAbstract4_Invk,
  sanhe_Intf;

type
  { Forward declarations }
  TDataService_Invoker = class;
  TLoginService_Invoker = class;
  TAndroidService_Invoker = class;

  TDataService_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  TLoginService_Invoker = class(DataAbstract4_invk.TSimpleLoginService_Invoker)
  public
    constructor Create; override;
  end;

  TAndroidService_Invoker = class(TROInvoker)
  public
    constructor Create; override;
  published
    procedure Invoke_sum(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_getNum(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_getOrderData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_delNum(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_getOrderDtList(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_getLocation(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_getCompany(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_getUser(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_addInstorage(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_addOrderBack(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_getInstorageData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_getInstorageDt(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_getInCode(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
  end;

implementation

uses
  uROEventRepository,
  uRORes,
  uROClient;

constructor TDataService_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor TLoginService_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor TAndroidService_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

procedure TAndroidService_Invoker.Invoke_sum(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_a: Integer;
  l_b: Integer;
  lResult: Integer;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_sum: __Instance does not support AndroidService interface');
    end;

    __Message.Read('a', System.TypeInfo(Integer), l_a, []);
    __Message.Read('b', System.TypeInfo(Integer), l_b, []);

    lResult := __lintf.sum(l_a, l_b);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'sumResponse');
    __Message.Write('Result', System.TypeInfo(Integer), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_getNum(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_proNum: UnicodeString;
  l_intoNum: UnicodeString;
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_getNum: __Instance does not support AndroidService interface');
    end;

    __Message.Read('proNum', System.TypeInfo(UnicodeString), l_proNum, []);
    __Message.Read('intoNum', System.TypeInfo(UnicodeString), l_intoNum, []);

    lResult := __lintf.getNum(l_proNum, l_intoNum);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'getNumResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsAnsiString]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_getOrderData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_puStatus: UnicodeString;
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_getOrderData: __Instance does not support AndroidService interface');
    end;

    __Message.Read('puStatus', System.TypeInfo(UnicodeString), l_puStatus, []);

    lResult := __lintf.getOrderData(l_puStatus);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'getOrderDataResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_delNum(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_comNum: UnicodeString;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_delNum: __Instance does not support AndroidService interface');
    end;

    __Message.Read('comNum', System.TypeInfo(UnicodeString), l_comNum, []);

    __lintf.delNum(l_comNum);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'delNumResponse');
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

    __oResponseOptions := [roNoResponse];

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_getOrderDtList(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_puOrderNum: UnicodeString;
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_getOrderDtList: __Instance does not support AndroidService interface');
    end;

    __Message.Read('puOrderNum', System.TypeInfo(UnicodeString), l_puOrderNum, []);

    lResult := __lintf.getOrderDtList(l_puOrderNum);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'getOrderDtListResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_getLocation(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_getLocation: __Instance does not support AndroidService interface');
    end;

    lResult := __lintf.getLocation();

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'getLocationResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_getCompany(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_getCompany: __Instance does not support AndroidService interface');
    end;

    lResult := __lintf.getCompany();

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'getCompanyResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_getUser(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_getUser: __Instance does not support AndroidService interface');
    end;

    lResult := __lintf.getUser();

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'getUserResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_addInstorage(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_inCode: UnicodeString;
  l_inType: UnicodeString;
  l_locationId: UnicodeString;
  l_companyId: UnicodeString;
  l_inDate: UnicodeString;
  l_userId: UnicodeString;
  l_operatorId: UnicodeString;
  l_inState: UnicodeString;
  l_oddNo: UnicodeString;
  l_department: UnicodeString;
  l_memo: UnicodeString;
  l_partnersId: UnicodeString;
  l_productIdStr: UnicodeString;
  l_qtyStr: UnicodeString;
  l_priceStr: UnicodeString;
  l_locationIdStr: UnicodeString;
  l_companyIdStr: UnicodeString;
  l_stateStr: UnicodeString;
  l_puOrderNum: UnicodeString;
  l_orderDtIdStr: UnicodeString;
  l_StateUpdateStr: UnicodeString;
  l_hadInQtyStr: UnicodeString;
  l_idCardNumAllStr: UnicodeString;
  l_qtyDetailAllStr: UnicodeString;
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_addInstorage: __Instance does not support AndroidService interface');
    end;

    __Message.Read('inCode', System.TypeInfo(UnicodeString), l_inCode, []);
    __Message.Read('inType', System.TypeInfo(UnicodeString), l_inType, []);
    __Message.Read('locationId', System.TypeInfo(UnicodeString), l_locationId, []);
    __Message.Read('companyId', System.TypeInfo(UnicodeString), l_companyId, []);
    __Message.Read('inDate', System.TypeInfo(UnicodeString), l_inDate, []);
    __Message.Read('userId', System.TypeInfo(UnicodeString), l_userId, []);
    __Message.Read('operatorId', System.TypeInfo(UnicodeString), l_operatorId, []);
    __Message.Read('inState', System.TypeInfo(UnicodeString), l_inState, []);
    __Message.Read('oddNo', System.TypeInfo(UnicodeString), l_oddNo, []);
    __Message.Read('department', System.TypeInfo(UnicodeString), l_department, []);
    __Message.Read('memo', System.TypeInfo(UnicodeString), l_memo, []);
    __Message.Read('partnersId', System.TypeInfo(UnicodeString), l_partnersId, []);
    __Message.Read('productIdStr', System.TypeInfo(UnicodeString), l_productIdStr, []);
    __Message.Read('qtyStr', System.TypeInfo(UnicodeString), l_qtyStr, []);
    __Message.Read('priceStr', System.TypeInfo(UnicodeString), l_priceStr, []);
    __Message.Read('locationIdStr', System.TypeInfo(UnicodeString), l_locationIdStr, []);
    __Message.Read('companyIdStr', System.TypeInfo(UnicodeString), l_companyIdStr, []);
    __Message.Read('stateStr', System.TypeInfo(UnicodeString), l_stateStr, []);
    __Message.Read('puOrderNum', System.TypeInfo(UnicodeString), l_puOrderNum, []);
    __Message.Read('orderDtIdStr', System.TypeInfo(UnicodeString), l_orderDtIdStr, []);
    __Message.Read('StateUpdateStr', System.TypeInfo(UnicodeString), l_StateUpdateStr, []);
    __Message.Read('hadInQtyStr', System.TypeInfo(UnicodeString), l_hadInQtyStr, []);
    __Message.Read('idCardNumAllStr', System.TypeInfo(UnicodeString), l_idCardNumAllStr, []);
    __Message.Read('qtyDetailAllStr', System.TypeInfo(UnicodeString), l_qtyDetailAllStr, []);

    lResult := __lintf.addInstorage(l_inCode, l_inType, l_locationId, l_companyId, l_inDate, l_userId, l_operatorId, l_inState, l_oddNo, l_department, l_memo, l_partnersId, l_productIdStr, l_qtyStr, l_priceStr, l_locationIdStr, l_companyIdStr, l_stateStr, l_puOrderNum, l_orderDtIdStr, l_StateUpdateStr, l_hadInQtyStr, l_idCardNumAllStr, l_qtyDetailAllStr);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'addInstorageResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_addOrderBack(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_outCode: UnicodeString;
  l_outType: UnicodeString;
  l_locationId: UnicodeString;
  l_companyId: UnicodeString;
  l_oddNo: UnicodeString;
  l_outUser: UnicodeString;
  l_outDate: UnicodeString;
  l_operatorId: UnicodeString;
  l_outState: UnicodeString;
  l_memo: UnicodeString;
  l_productIdStr: UnicodeString;
  l_locationIdStr: UnicodeString;
  l_companyIdStr: UnicodeString;
  l_qtyStr: UnicodeString;
  l_priceStr: UnicodeString;
  l_stateStr: UnicodeString;
  l_hadInQtyStr: UnicodeString;
  l_partnersId: UnicodeString;
  l_inCode: UnicodeString;
  l_InstorageDtIdStr: UnicodeString;
  l_StateUpdateStr: UnicodeString;
  l_hadOutQtyStr: UnicodeString;
  l_updateState: UnicodeString;
  l_repertoryIdStr: UnicodeString;
  l_updateQtyStr: UnicodeString;
  l_idCardNumStr: UnicodeString;
  l_detailStr: UnicodeString;
  l_detailQtyStr: UnicodeString;
  l_recordType: UnicodeString;
  l_updateRepertoryQtyStr: UnicodeString;
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_addOrderBack: __Instance does not support AndroidService interface');
    end;

    __Message.Read('outCode', System.TypeInfo(UnicodeString), l_outCode, []);
    __Message.Read('outType', System.TypeInfo(UnicodeString), l_outType, []);
    __Message.Read('locationId', System.TypeInfo(UnicodeString), l_locationId, []);
    __Message.Read('companyId', System.TypeInfo(UnicodeString), l_companyId, []);
    __Message.Read('oddNo', System.TypeInfo(UnicodeString), l_oddNo, []);
    __Message.Read('outUser', System.TypeInfo(UnicodeString), l_outUser, []);
    __Message.Read('outDate', System.TypeInfo(UnicodeString), l_outDate, []);
    __Message.Read('operatorId', System.TypeInfo(UnicodeString), l_operatorId, []);
    __Message.Read('outState', System.TypeInfo(UnicodeString), l_outState, []);
    __Message.Read('memo', System.TypeInfo(UnicodeString), l_memo, []);
    __Message.Read('productIdStr', System.TypeInfo(UnicodeString), l_productIdStr, []);
    __Message.Read('locationIdStr', System.TypeInfo(UnicodeString), l_locationIdStr, []);
    __Message.Read('companyIdStr', System.TypeInfo(UnicodeString), l_companyIdStr, []);
    __Message.Read('qtyStr', System.TypeInfo(UnicodeString), l_qtyStr, []);
    __Message.Read('priceStr', System.TypeInfo(UnicodeString), l_priceStr, []);
    __Message.Read('stateStr', System.TypeInfo(UnicodeString), l_stateStr, []);
    __Message.Read('hadInQtyStr', System.TypeInfo(UnicodeString), l_hadInQtyStr, []);
    __Message.Read('partnersId', System.TypeInfo(UnicodeString), l_partnersId, []);
    __Message.Read('inCode', System.TypeInfo(UnicodeString), l_inCode, []);
    __Message.Read('InstorageDtIdStr', System.TypeInfo(UnicodeString), l_InstorageDtIdStr, []);
    __Message.Read('StateUpdateStr', System.TypeInfo(UnicodeString), l_StateUpdateStr, []);
    __Message.Read('hadOutQtyStr', System.TypeInfo(UnicodeString), l_hadOutQtyStr, []);
    __Message.Read('updateState', System.TypeInfo(UnicodeString), l_updateState, []);
    __Message.Read('repertoryIdStr', System.TypeInfo(UnicodeString), l_repertoryIdStr, []);
    __Message.Read('updateQtyStr', System.TypeInfo(UnicodeString), l_updateQtyStr, []);
    __Message.Read('idCardNumStr', System.TypeInfo(UnicodeString), l_idCardNumStr, []);
    __Message.Read('detailStr', System.TypeInfo(UnicodeString), l_detailStr, []);
    __Message.Read('detailQtyStr', System.TypeInfo(UnicodeString), l_detailQtyStr, []);
    __Message.Read('recordType', System.TypeInfo(UnicodeString), l_recordType, []);
    __Message.Read('updateRepertoryQtyStr', System.TypeInfo(UnicodeString), l_updateRepertoryQtyStr, []);

    lResult := __lintf.addOrderBack(l_outCode, l_outType, l_locationId, l_companyId, l_oddNo, l_outUser, l_outDate, l_operatorId, l_outState, l_memo, l_productIdStr, l_locationIdStr, l_companyIdStr, l_qtyStr, l_priceStr, l_stateStr, l_hadInQtyStr, l_partnersId, l_inCode, l_InstorageDtIdStr, l_StateUpdateStr, l_hadOutQtyStr, l_updateState, l_repertoryIdStr, l_updateQtyStr, l_idCardNumStr, l_detailStr, l_detailQtyStr, l_recordType, l_updateRepertoryQtyStr);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'addOrderBackResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_getInstorageData(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_inState: UnicodeString;
  l_locationId: UnicodeString;
  l_companyId: UnicodeString;
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_getInstorageData: __Instance does not support AndroidService interface');
    end;

    __Message.Read('inState', System.TypeInfo(UnicodeString), l_inState, []);
    __Message.Read('locationId', System.TypeInfo(UnicodeString), l_locationId, []);
    __Message.Read('companyId', System.TypeInfo(UnicodeString), l_companyId, []);

    lResult := __lintf.getInstorageData(l_inState, l_locationId, l_companyId);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'getInstorageDataResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_getInstorageDt(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_inCode: UnicodeString;
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_getInstorageDt: __Instance does not support AndroidService interface');
    end;

    __Message.Read('inCode', System.TypeInfo(UnicodeString), l_inCode, []);

    lResult := __lintf.getInstorageDt(l_inCode);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'getInstorageDtResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure TAndroidService_Invoker.Invoke_getInCode(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_inCode: UnicodeString;
  lResult: string;
  __lintf: sanhe_Intf.IAndroidService;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IAndroidService, __lintf) then begin
      raise EIntfCastError.Create('Critical error in TAndroidService_Invoker.Invoke_getInCode: __Instance does not support AndroidService interface');
    end;

    __Message.Read('inCode', System.TypeInfo(UnicodeString), l_inCode, []);

    lResult := __lintf.getInCode(l_inCode);

    __Message.InitializeResponseMessage(__Transport, 'sanhe', 'AndroidService', 'getInCodeResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

initialization
finalization
end.

